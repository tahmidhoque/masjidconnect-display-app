# MasjidConnect Display App - Cursor Rules

## Project Overview
The MasjidConnect Display App is a digital signage application for mosques to display prayer times, announcements, events, and other content. It is designed as a "no user input" application, meaning end users do not interact with it directly.

## Code Structure and Organization

### Directory Structure
- `src/api/` - API client and models
- `src/components/` - React components
  - `common/` - Reusable components
  - `layouts/` - Layout components (Landscape/Portrait)
  - `screens/` - Screen components (Pairing, Display, etc.)
- `src/contexts/` - React contexts for state management
- `src/hooks/` - Custom React hooks
- `src/services/` - Services for data handling, storage, etc.
- `src/theme/` - Theme configuration
- `src/utils/` - Utility functions

### Naming Conventions
- **Files**: Use PascalCase for React components, camelCase for utilities and services
- **Components**: Use PascalCase (e.g., `PrayerTimesDisplay.tsx`)
- **Hooks**: Use camelCase with 'use' prefix (e.g., `usePrayerTimes.ts`)
- **Contexts**: Use PascalCase with 'Context' suffix (e.g., `AuthContext.tsx`)
- **Services**: Use camelCase with 'Service' suffix (e.g., `storageService.ts`)
- **Interfaces/Types**: Use PascalCase with descriptive names (e.g., `PrayerTimes`, `ContentItem`)

## TypeScript Guidelines

### Type Safety
- Always use proper TypeScript types for all variables, parameters, and return values
- Avoid using `any` type unless absolutely necessary
- Use interfaces for object shapes and types for unions/primitives
- Create dedicated type files for complex data structures

### Type Examples
```typescript
// API Models
interface PrayerTimes {
  date: string;
  fajr: string;
  sunrise: string;
  zuhr: string;
  asr: string;
  maghrib: string;
  isha: string;
  fajrJamaat: string;
  zuhrJamaat: string;
  asrJamaat: string;
  maghribJamaat: string;
  ishaJamaat: string;
}

// Component Props
interface PrayerTimesDisplayProps {
  simplified?: boolean;
  showHijriDate?: boolean;
}

// Context Types
interface AuthContextType {
  isAuthenticated: boolean;
  isPairing: boolean;
  screenId: string | null;
  pairingError: string | null;
  pairScreen: (pairingCode: string) => Promise<boolean>;
  unpairScreen: () => void;
}
```

## React Component Guidelines

### Functional Components
- Use functional components with hooks instead of class components
- Use TypeScript for component props and state
- Add JSDoc comments for component documentation

### Component Structure
```typescript
/**
 * ComponentName component
 * 
 * Brief description of what the component does.
 * Additional details if necessary.
 */
const ComponentName: React.FC<ComponentProps> = ({ prop1, prop2 }) => {
  // State hooks
  const [state, setState] = useState<StateType>(initialState);
  
  // Effect hooks
  useEffect(() => {
    // Side effects
    return () => {
      // Cleanup
    };
  }, [dependencies]);
  
  // Event handlers
  const handleEvent = () => {
    // Handle event
  };
  
  // Render helpers
  const renderSomething = () => {
    return <div>Something</div>;
  };
  
  // Main render
  return (
    <div>
      {/* Component JSX */}
    </div>
  );
};

export default ComponentName;
```

## State Management Guidelines

### Context API
- Use React Context API for global state management
- Create separate contexts for different concerns (auth, content, etc.)
- Provide helper hooks to access context values

### Local State
- Use `useState` for component-specific state
- Use `useReducer` for complex state logic
- Avoid prop drilling by using context or custom hooks

## API and Data Handling

### API Calls
- Use the API client for all API calls
- Handle loading, error, and success states
- Implement proper error handling and retry mechanisms

### Offline Data
- Use LocalForage for offline data storage
- Implement data synchronization with the backend
- Handle offline scenarios gracefully

## UI/UX Guidelines

### Material UI
- Follow the MasjidConnect design system
- Use Custom UI components that match the branding and theme of the project
- Customize components using the theme

### Responsive Design
- Support both landscape and portrait orientations
- Use responsive layouts and components
- Test on different screen sizes

### Accessibility
- Use semantic HTML elements
- Provide proper ARIA attributes
- Ensure sufficient color contrast

## Performance Considerations

### Rendering Optimization
- Use React.memo for expensive components
- Use useMemo and useCallback for expensive calculations and callbacks
- Implement virtualization for long lists

### Code Splitting
- Use React.lazy and Suspense for code splitting
- Lazy load non-critical components
- Optimize bundle size

## Testing Guidelines

### Unit Tests
- Write tests for utility functions and hooks
- Use Jest and React Testing Library
- Focus on behavior, not implementation details

### Component Tests
- Test component rendering and interactions
- Test different states and edge cases

## Documentation Guidelines

### Code Comments
- Use JSDoc comments for functions and components
- Explain complex logic and algorithms
- Document non-obvious behavior

### README
- Provide clear installation and usage instructions
- Document available scripts and commands
- Include troubleshooting information

## Important Notes

### No User Input Design
Remember that this application is designed as a "no user input" display. The only user interaction should be during the initial pairing process. All content management is done through the MasjidConnect management portal.

### Offline First
The application should work reliably in offline environments. Always implement proper caching and fallback mechanisms.

### Error Handling
Implement robust error handling to ensure the display continues to function even when errors occur. Use error boundaries and fallback UI. 

### Implementing new features or fixing existing ones 
when asked to create a new feature or fix an exisiting feature always look at how the whole code from start to finish works and make sure you understand the full flow of data and where it comes from and how it trickles through all the contexts and services to get to components 
